@using Mzayad.Web.Extensions
@model Mzayad.Web.Areas.admin.Models.Avatar.AvatarAddViewModel

@{
    ViewBag.Title = "Edit Avatar";
}
@section styles
{
    @Styles.Render("~/css/image-uploader")
}
<div class="row">
    <div class="@Html.Css().FormNormal">
        @using (Html.BeginForm("Edit", "Avatars", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            <section>
                <div class="form-group">
                    @Html.Label("Image")
                    <ul id="sortable-list" class="multipleUploadContainer">
                        <li id="image0" data-index="0">@Html.Partial("_ImageUpload")</li>
                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="form-group">
                    <div class="checkbox">
                        <label>
                            @Html.CheckBoxFor(i => i.Avatar.IsPremium) Premium?
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    <div class="input-group">
                        @Html.TextBoxFor(i => i.Avatar.Token, new { @type = "number", @class = "form-control token-validation" })
                        <div class="input-group-addon">Token</div>
                    </div>
                    @Html.ValidationMessageFor(i => i.Avatar.Token)
                </div>
            </section>
            <section class="form-buttons">
                <button type="submit" class="btn btn-default">Upload</button>
            </section>
        }
    </div>
</div>

@section scripts
{
    @Scripts.Render("~/js/validate")
    @Scripts.Render("~/js/image-uploader")
    <script>

        var displayUploader = function() {
            $(".multipleUploadContainer .image-uploader").hide();
            var multiUploaders = $(".multipleUploadContainer .image-uploader");
            $(multiUploaders.get(0)).show();
        };


        $(function() {

            var bindFileUploader = function() {
                var multiUploaders = $(".multipleUploadContainer .image-uploader");
                @{

                    var coverImageId = !string.IsNullOrEmpty(Model.Avatar.Url) ? Model.Avatar.AvatarId.ToString() : "";
                    var coverImageUrl = !string.IsNullOrEmpty(Model.Avatar.Url) ? Model.Avatar.Url : "";
                }
                $(multiUploaders.get(0))
                    .fileUpload({
                        itemId: "@coverImageId",
                        parentId: "",
                        imageUrl: "@coverImageUrl",
                        uploadUrl: "/admin/avatars/UploadAvatarImage",
                        deleteUrl: "",
                        onUploadSuccessCallback: function (file, response) {

                            $(".image-delete-button").hide();

                        }
                    });

            };

            $(function() {
                bindFileUploader();
                $(".image-delete-button").hide();
                var $isPremium = $("#@Html.IdFor(i => i.Avatar.IsPremium)");
                var $token = $("#@Html.IdFor(i => i.Avatar.Token)");
                if (!$isPremium.is(":checked")) {
                    $token.attr("disabled", "disabled");
                }

                $isPremium.change(function () {
                    var $this = $(this);
                    if ($this.is(":checked")) {
                        $token.removeAttr("disabled");
                    } else {
                        $token.attr("disabled", "disabled");
                        $token.val("");
                    }
                });
                //validation setup
                $.validator.addMethod("validateToken", function () {

                    if ($isPremium.is(":checked")) {
                        return ($token.val().length != 0);
                    }

                    return true;
                    

                }, 'Please enter avatar token.');

                $.validator.addClassRules("token-validation",{ validateToken: true});
            });
        });
    </script>
}



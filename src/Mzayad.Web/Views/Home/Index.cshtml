@using Microsoft.AspNet.Identity
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using OrangeJetpack.Base.Web
@model Mzayad.Web.Models.Home.IndexViewModel

@{
    ViewBag.Title = Global.Home;
}

@section styles {
    @Styles.Render("~/css/nivo")
}

@if (!User.Identity.IsAuthenticated || true)
{
    <p><img class="img-responsive" src="https://az723232.vo.msecnd.net/assets/hero-movie-635750647415139708.jpg" alt="" /></p>
}

@if (Model.ClosedAuctions.Any())
{
    <h2>Closed Auctions</h2>

    <ol id="closed-auctions">
        @foreach (var auction in Model.ClosedAuctions)
        {
            <li>@Html.DisplayFor(m => auction, "AuctionTile")</li>
        }
    </ol>

    <p class="text-center"><a class="btn btn-unstyled text-uppercase" href="@Url.Action("Closed", "Auctions", new { Area = "", Language = LanguageCode })">@Global.ViewAllClosedAuctions</a></p>
}

@if (!Model.LiveAuctions.Any())
{
    @Html.StatusMessage("There are no live auctions available at this time.", StatusMessageType.Warning)

    return;
}

<h2>Live Auctions</h2>

<ol id="auction-list" data-bind="foreach: auctions">
    <li class="auction-item">

        <!-- ko if: $index() == 0 -->
        <div class="live-action-ribbon">@Global.LiveAuctions</div>
        <!-- /ko -->
        
        <div class="row">
            <div class="col-md-6 live-ribbon-container">
                <img class="auction-image img-responsive" data-bind="attr: { src: imageUrl, alt: title }" alt="">
                <img class="auction-image img-responsive" data-bind="attr: { src: imageUrl, alt: title }" alt="">
                <div class="sponsor-ribbon"><span data-bind="text:sponsorName"></span></div>
            </div>

            <div class="col-md-6">

                <div class="auction-details">

                    <h3 class="auction-title" data-bind="text: title"></h3>
                    <div class="auction-retail-price" data-bind="text: retailPriceFormatted"></div>

                    <div class="auction-status-loading" data-bind="visible: !isLoaded()">
                        <i class="fa fa-spin fa-cog"></i>
                        @Global.Loading
                    </div>

                    <div class="auction-status-details" data-bind="visible: isLoaded()">

                        <ol class="auction-time-left">
                            <li class="auction-time-part">
                                <div class="auction-time-value" data-bind="text: timeLeftHours"></div>
                                <div class="auction-time-label">
                                    <small>@Global.Hours</small>
                                </div>
                            </li>
                            <li class="auction-time-part">
                                <div class="auction-time-value" data-bind="text: timeLeftMinutes"></div>
                                <div class="auction-time-label">
                                    <small>@Global.Minutes</small>
                                </div>
                            </li>
                            <li class="auction-time-part">
                                <div class="auction-time-value" data-bind="text: timeLeftSeconds"></div>
                                <div class="auction-time-label">
                                    <small>@Global.Seconds</small>
                                </div>
                            </li>
                        </ol>

                        <div class="clearfix"></div>

                        <div class="row">
                            <div class="auction-bid-details col-md-8">
                                <div class="auction-bid-label">
                                    <small>@Global.CurrentAuctionPrice</small>
                                </div>
                                <div class="auction-bid-form input-group">
                                    <input type="text" class="form-control" readonly="readonly" data-bind="value: lastBidFormatted">
                                    <span class="input-group-btn">
                                        @if (Request.IsAuthenticated)
                                        {
                                            <button type="button" class="btn btn-default" data-bind="click: submitBid">@Global.Bid</button>
                                        }
                                        else
                                        {
                                            <a class="btn btn-default" href="@Url.Action("SignIn", "Account", new {ReturnUrl = "/"})">@Global.Bid</a>
                                        }
                                    </span>
                                </div>
                                <ol class="auction-recent-bids" data-bind="foreach: bidsReversed">
                                    <li>
                                        <div class="pull-left">
                                            <img data-bind="attr: { src: avatarUrl, alt: userName }" width="32"/>
                                        </div>
                                        <div class="auction-recent-username pull-left">
                                            <span data-bind="text: userName"></span>
                                        </div>
                                        <div class="auction-recent-bidamount pull-right">
                                            KD <span data-bind="text: bidAmount"></span>
                                        </div>
                                        <div class="clearfix"></div>
                                    </li>
                                </ol>
                            </div>
                        </div>

                        <ul class="auction-action-buttons">
                            <li data-bind="visible: buyNowEnabled">
                                <a class="btn btn-default btn-rounded" data-bind="attr: { href: buyNowUrl }">@Global.BuyNow</a>
                            </li>
                            <li>
                                <a class="btn btn-unstyled btn-rounded" data-bind="attr: { href: autoBidUrl }">@Global.AutoBid</a>
                            </li>
                            <li>
                                <a class="btn btn-unstyled btn-rounded" data-bind="attr: { href: wishListUrl }">@Global.AddToWishList</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </li>
</ol>

@section scripts {

    @Scripts.Render("~/js/knockout")
    @Scripts.Render("~/js/signalR")
    @if (Request.IsLocal)
    {
        <script src="/signalr/hubs"></script>
    }
    else
    {
        <script src="https://mzayad.azurewebsites.net/signalr/hubs"></script>
    }
    
    <script>

        $(function() {

            var auctions = @Html.Raw(JsonConvert.SerializeObject(Model.LiveAuctions, Formatting.Indented, new JsonSerializerSettings {ContractResolver = new CamelCasePropertyNamesContractResolver()}));
            var auctionIds = @JsonConvert.SerializeObject(Model.LiveAuctionIds);
            var auctionHub = $.connection.auctionHub;

            var Auction = function(data) {
                var self = this;

                self.auctionId = data.auctionId;
                self.title = data.title;
                self.retailPrice = data.retailPrice;
                self.buyNowEnabled = data.buyNowEnabled;
                self.imageUrl = data.imageUrl;
                self.sponsorName = data.sponsorName;

                self.bids = ko.observableArray(data.bids);
                self.status = ko.observable(data.status);
                self.isLoaded = ko.observable(false);
                self.secondsLeft = ko.observable();
                self.lastBidAmount = ko.observable(data.lastBidAmount);

                self.bidsReversed = ko.computed(function() {
                    return self.bids().sort(function(l, r) {
                        return l.bidAmount < r.bidAmount ? 1 : -1;
                    });
                });

                self.timeLeftHours = ko.computed(function() {
                    return App.TimeUtilities.getHours(self.secondsLeft());
                });

                self.timeLeftMinutes = ko.computed(function() {
                    return App.TimeUtilities.getMinutes(self.secondsLeft());
                });

                self.timeLeftSeconds = ko.computed(function() {
                    return App.TimeUtilities.getSeconds(self.secondsLeft());
                });

                self.buyNowUrl = ko.computed(function() {
                    return "@LanguageCode/orders/buy-now/" + self.auctionId;
                });

                self.autoBidUrl = ko.computed(function() {
                    return "@LanguageCode/auto-bid/edit/" + self.auctionId;
                });

                self.wishListUrl = ko.computed(function() {
                    return "@LanguageCode/wishlist/add?item=" + self.title;
                });

                self.retailPriceFormatted = ko.computed(function() {
                    return "Retail Price: " + self.retailPrice;
                });

                self.lastBidFormatted = ko.computed(function() {
                    if (!self.lastBidAmount()) {
                        return "";
                    }

                    return "KD " + self.lastBidAmount();
                });

                self.submitBid = function() {
                    auctionHub.server.submitBid(self.auctionId, '@User.Identity.GetUserId()');
                };

                self.closeAuction = function() {
                    self.status("Closed");
                };

                self.redirectOrder = function(orderId) {
                    location.href = "@LanguageCode/orders/auction/" + orderId;
                };
            };

            var AuctionsViewModel = function(data) {
                var self = this;
                self.auctions = ko.observableArray([]);

                self.getAuction = function(auctionId) {
                    for (var i = 0, len = self.auctions().length; i < len; i++) {
                        if (self.auctions()[i].auctionId === auctionId)
                            return self.auctions()[i];
                    }
                    return null;
                };

                var mappedAuctions = $.map(data, function(auction) { return new Auction(auction); });
                self.auctions(mappedAuctions);
            };

            var viewModel = new AuctionsViewModel(auctions);
            ko.applyBindings(viewModel);

            auctionHub.client.updateAuctions = function(results) {
                console.log(results);
                var auctionJson = $.parseJSON(results);
                for (var i = 0, len = auctionJson.length; i < len; ++i) {
                    var auction = auctionJson[i];
                    var model = viewModel.getAuction(auction.auctionId);
                    if (model) {
                        model.secondsLeft(auction.secondsLeft);
                        model.lastBidAmount(auction.lastBidAmount);
                        model.bids(auction.bids);
                        model.isLoaded(true);
                    }
                }
            };

            auctionHub.client.closeAuction = function(auctionId, userId, orderId) {
                var auction = viewModel.getAuction(auctionId);
                if (auction) {
                    auction.closeAuction();
                    if (userId === "@User.Identity.GetUserId()") {
                        auction.redirectOrder(orderId);
                    }
                }
            }

           $.connection.hub.logging = true;

            @if (!Request.IsLocal)
            {
                <text>$.connection.hub.url = "https://mzayad.azurewebsites.net/signalr";</text>
            }

            $.connection.hub.start().done(function() {
                auctionHub.server.initAuctions(auctionIds).done(function(results) {
                    console.log(results);
                });
            });
        });

    </script>
}
